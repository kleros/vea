{
  "address": "0xcC196cC90bD30109E39400817e6ef63A1b744659",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IAMB",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaInboxArbToGnosis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaOutboxArbToGnosis",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inboxChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ticketID",
          "type": "uint256"
        }
      ],
      "name": "Routed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestedSequencerDelayLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitDecreaseRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ticketID",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requestedSequencerFutureLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerFutureLimitDecreaseRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ticketID",
          "type": "uint256"
        }
      ],
      "name": "sequencerFutureLimitSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSequencerFutureLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerFutureLimitUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "L2GasBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amb",
      "outputs": [
        {
          "internalType": "contract IAMB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeSequencerDelayLimitDecreaseRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeSequencerFutureLimitDecreaseRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateroot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_inboxIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_excessFeeRefundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePerGas",
          "type": "uint256"
        }
      ],
      "name": "route",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inboxIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_excessFeeRefundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePerGas",
          "type": "uint256"
        }
      ],
      "name": "sendSequencerDelayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inboxIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_excessFeeRefundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxFeePerGas",
          "type": "uint256"
        }
      ],
      "name": "sendSequencerFutureLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerDelayLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerDelayLimitDecreaseRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestedSequencerLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerFutureLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerFutureLimitDecreaseRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestedSequencerLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSequencerDelayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSequencerFutureLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaInboxGnosisToArb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaOutboxGnosisToArb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2d0313b87602f6f39a3789a0deebc293fa500492f9e5aa4ee59a188ab829254",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0xcC196cC90bD30109E39400817e6ef63A1b744659",
    "transactionIndex": 29,
    "gasUsed": "1392477",
    "logsBloom": "0x
    "blockHash": "0x5e9d0f1606125fec63439c7794e0d465e7e3033759c8c15f6c7cccdb1c5e53e8",
    "transactionHash": "0xb2d0313b87602f6f39a3789a0deebc293fa500492f9e5aa4ee59a188ab829254",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 9292617,
        "transactionHash": "0xb2d0313b87602f6f39a3789a0deebc293fa500492f9e5aa4ee59a188ab829254",
        "address": "0xcC196cC90bD30109E39400817e6ef63A1b744659",
        "topics": [
          "0x611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000015180",
        "logIndex": 58,
        "blockHash": "0x5e9d0f1606125fec63439c7794e0d465e7e3033759c8c15f6c7cccdb1c5e53e8"
      }
    ],
    "blockNumber": 9292617,
    "cumulativeGasUsed": "4107286",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf4159A80B6Cc41ED517DB1c453d1Ef5C2e4dB72",
    "0x99Ca51a3534785ED619f46A79C7Ad65Fa8d85e7a",
    "0xc0804E4FcEEfD958050356A429DAaaA71aA39385",
    "0xE14fA0B3910CB0853E811375B9a6fcEEE32db521",
    5
  ],
  "numDeployments": 10,
  "solcInputHash": "916b5e2210e8e15d34b48798389f67fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IAMB\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaInboxArbToGnosis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaOutboxArbToGnosis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inboxChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"Routed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestedSequencerDelayLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requestedSequencerFutureLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerFutureLimitDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ticketID\",\"type\":\"uint256\"}],\"name\":\"sequencerFutureLimitSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSequencerFutureLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerFutureLimitUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"L2GasBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSequencerDelayLimitDecreaseRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSequencerFutureLimitDecreaseRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateroot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_inboxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_excessFeeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"route\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inboxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_excessFeeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"sendSequencerDelayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inboxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_excessFeeRefundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"sendSequencerFutureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerDelayLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerDelayLimitDecreaseRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedSequencerLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerFutureLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerFutureLimitDecreaseRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedSequencerLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSequencerDelayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSequencerFutureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaInboxGnosisToArb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaOutboxGnosisToArb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Router from Gnosis Chain to Arbitrum. Note: This contract is deployed on Ethereum.\",\"events\":{\"Routed(uint256,uint256)\":{\"details\":\"Event emitted when a message is relayed to another Safe Bridge.\",\"params\":{\"_epoch\":\"The epoch of the batch requested to send.\",\"_ticketID\":\"The unique identifier provided by the underlying canonical bridge.\"}},\"sequencerDelayLimitDecreaseRequested(uint256)\":{\"details\":\"This event indicates that a request to decrease the sequencer delay limit has been made.\",\"params\":{\"_requestedSequencerDelayLimit\":\"The new sequencer limit requested.\"}},\"sequencerDelayLimitSent(uint256)\":{\"details\":\"This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer delay limit value\",\"params\":{\"_ticketID\":\"The ticketID from the delayed inbox of the cross-chain message.\"}},\"sequencerDelayLimitUpdated(uint256)\":{\"details\":\"This event indicates the sequencer delay limit updated.\",\"params\":{\"_newSequencerDelayLimit\":\"The new sequencer delay limit.\"}},\"sequencerFutureLimitDecreaseRequested(uint256)\":{\"details\":\"This event indicates that a request to decrease the sequencer future limit has been made.\",\"params\":{\"_requestedSequencerFutureLimit\":\"The new sequencer limit requested.\"}},\"sequencerFutureLimitSent(uint256)\":{\"details\":\"This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer future limit value\",\"params\":{\"_ticketID\":\"The ticketID from the delayed inbox of the cross-chain message.\"}},\"sequencerFutureLimitUpdated(uint256)\":{\"details\":\"This event indicates the sequencer future limit updated.\",\"params\":{\"_newSequencerFutureLimit\":\"The new sequencer future limit.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_amb\":\"The address of the AMB contract on Ethereum.\",\"_bridge\":\"The address of the arbitrum bridge contract on Ethereum.\",\"_inboxChainId\":\"The chain ID of the inbox chain.\",\"_veaInboxArbToGnosis\":\"The vea inbox on Arbitrum.\",\"_veaOutboxArbToGnosis\":\"The vea outbox on Gnosis Chain.\"}},\"executeSequencerDelayLimitDecreaseRequest()\":{\"details\":\"execute sequencerDelayLimitDecreaseRequest\"},\"executeSequencerFutureLimitDecreaseRequest()\":{\"details\":\"execute sequencerFutureLimitDecreaseRequest\"},\"route(uint256,bytes32,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch to verify.\",\"_excessFeeRefundAddress\":\"Address to refund any excess fee to.\",\"_gasLimit\":\"Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).\",\"_inboxIndex\":\"The index of the inbox in the Arbitrum bridge contract.\",\"_maxFeePerGas\":\"price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).\",\"_maxSubmissionCost\":\"Max gas deducted from user's L2 balance to cover base submission fee.\",\"_stateroot\":\"The true state root for the epoch.\"}},\"sendSequencerDelayLimit(uint256,uint256,address,uint256,uint256)\":{\"details\":\"Send the sequencer delay limit through the delayed inbox.\"},\"sendSequencerFutureLimit(uint256,uint256,address,uint256,uint256)\":{\"details\":\"Send the sequencer future limit through the delayed inbox.\"},\"updateSequencerDelayLimit()\":{\"details\":\"Update the sequencerDelayLimit. If decreasing, a delayed request is created for later execution.\"},\"updateSequencerFutureLimit()\":{\"details\":\"Update the sequencerFutureLimit. If decreasing, a delayed request is created for later execution.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"route(uint256,bytes32,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Note: Access restricted to arbitrum canonical bridge.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gnosisToArbitrum/RouterGnosisToArb.sol\":\"RouterGnosisToArb\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/canonical/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a\\n// implementation: https://etherscan.io/address/0x1066cecc8880948fe55e427e94f1ff221d626591#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IBridge {\\n    function activeOutbox() external view returns (address);\\n\\n    function sequencerInbox() external view returns (address);\\n\\n    function allowedDelayedInboxList(uint256) external returns (address);\\n}\\n\",\"keccak256\":\"0x4ae55bd0aaa3633ba027e3b9dccfe64dbca2c44219e53831b7308a4aebb6c83d\",\"license\":\"BUSL-1.1\"},\"src/canonical/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IInbox.sol\\n// proxy: https://etherscan.io/address/0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f\\n// implementation: https://etherscan.io/address/0x5aed5f8a1e3607476f1f81c3d8fe126deb0afe94\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface IInbox {\\n    function bridge() external view returns (IBridge);\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n     * @param to destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param data ABI encoded data of L2 message\\n     * @return unique message number of the retryable transaction\\n     */\\n    function createRetryableTicket(\\n        address to,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x2497d8bd48681de9d2b9929152afbc3ad5508923cce0eb4e863bf576955ddec2\",\"license\":\"BUSL-1.1\"},\"src/canonical/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/IBridge.sol\\n// proxy: https://etherscan.io/address/0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840#code\\n// implementation: https://etherscan.io/address/0x0ea7372338a589e7f0b00e463a53aa464ef04e17#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IOutbox {\\n    /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n    ///         When the return value is zero, that means this is a system message\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function l2ToL1Sender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x951eb1a9a67bbd56579cafa1424660d02565aa908a5b4397face5ac6559ce91c\",\"license\":\"BUSL-1.1\"},\"src/canonical/arbitrum/ISequencerInbox.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/bridge/ISequencerInbox.sol\\n// proxy: https://etherscan.io/address/0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6#code\\n// implementation: https://etherscan.io/address/0xD03bFe2CE83632F4E618a97299cc91B1335BB2d9#code\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface ISequencerInbox {\\n    struct MaxTimeVariation {\\n        uint256 delayBlocks;\\n        uint256 futureBlocks;\\n        uint256 delaySeconds;\\n        uint256 futureSeconds;\\n    }\\n\\n    function maxTimeVariation() external view returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe8db6941df1f303771990646eae52e8d5bfe46326457dc9d19588dd443281b39\",\"license\":\"BUSL-1.1\"},\"src/canonical/gnosis-chain/IAMB.sol\":{\"content\":\"// https://docs.gnosischain.com/bridges/tokenbridge/amb-bridge#gnosis\\n// https://github.com/omni/tokenbridge-contracts/blob/908a48107919d4ab127f9af07d44d47eac91547e/contracts/interfaces/IAMB.sol\\n// interface is pruned for relevant function stubs\\n\\npragma solidity 0.8.18;\\n\\ninterface IAMB {\\n    function requireToPassMessage(address _contract, bytes memory _data, uint256 _gas) external returns (bytes32);\\n\\n    function maxGasPerTx() external view returns (uint256);\\n\\n    function messageSender() external view returns (address);\\n\\n    function messageSourceChainId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x529d45e46ca0c046c32b296b35ae8073c4a999ef37510545ec44d26e78deca0d\"},\"src/gnosisToArbitrum/RouterGnosisToArb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@shotaronowhere, @jaybuidl]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../canonical/gnosis-chain/IAMB.sol\\\";\\nimport \\\"../canonical/arbitrum/IBridge.sol\\\";\\nimport \\\"../canonical/arbitrum/IOutbox.sol\\\";\\nimport \\\"../canonical/arbitrum/IInbox.sol\\\";\\nimport \\\"../interfaces/routers/IRouterToArb.sol\\\";\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL2.sol\\\";\\nimport \\\"../canonical/arbitrum/ISequencerInbox.sol\\\";\\nimport \\\"../interfaces/updaters/ISequencerDelayUpdatable.sol\\\";\\nimport \\\"../interfaces/updaters/ISequencerFutureUpdatable.sol\\\";\\n\\n/// @dev Router from Gnosis Chain to Arbitrum.\\n/// Note: This contract is deployed on Ethereum.\\ncontract RouterGnosisToArb is IRouterToArb {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    IBridge public immutable bridge; // The address of the Arbitrum bridge contract.\\n    IAMB public immutable amb; // The address of the AMB contract on Ethereum.\\n    address public immutable veaInboxGnosisToArb; // The address of the veaInbox on Gnosis.\\n    address public immutable veaOutboxGnosisToArb; // The address of the veaOutbox on Arbitrum.\\n    uint256 internal immutable inboxChainId; // The chain ID of the inbox chain.\\n\\n    mapping(address => uint256) public L2GasBalance;\\n\\n    uint256 public sequencerDelayLimit; // This is MaxTimeVariation.delaySeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can backdate L2 txns relative to the L1 clock.\\n    uint256 public sequencerFutureLimit; // This is MaxTimeVariation.futureSeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can futuredate L2 txns relative to the L1 clock.\\n    SequencerLimitDecreaseRequest public sequencerDelayLimitDecreaseRequest; // Decreasing the sequencerDelayLimit requires a delay to avoid griefing by sequencer, so we keep track of the request here.\\n    SequencerLimitDecreaseRequest public sequencerFutureLimitDecreaseRequest; // Decreasing the sequencerDelayLimit requires a delay to avoid griefing by sequencer, so we keep track of the request here.\\n\\n    struct SequencerLimitDecreaseRequest {\\n        uint256 requestedSequencerLimit;\\n        uint256 timestamp;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Event emitted when a message is relayed to another Safe Bridge.\\n    /// @param _epoch The epoch of the batch requested to send.\\n    /// @param _ticketID The unique identifier provided by the underlying canonical bridge.\\n    event Routed(uint256 indexed _epoch, uint256 _ticketID);\\n\\n    /// @dev This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer delay limit value\\n    /// @param _ticketID The ticketID from the delayed inbox of the cross-chain message.\\n    event sequencerDelayLimitSent(uint256 _ticketID);\\n\\n    /// @dev This event indicates the sequencer delay limit updated.\\n    /// @param _newSequencerDelayLimit The new sequencer delay limit.\\n    event sequencerDelayLimitUpdated(uint256 _newSequencerDelayLimit);\\n\\n    /// @dev This event indicates that a request to decrease the sequencer delay limit has been made.\\n    /// @param _requestedSequencerDelayLimit The new sequencer limit requested.\\n    event sequencerDelayLimitDecreaseRequested(uint256 _requestedSequencerDelayLimit);\\n\\n    /// @dev This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer future limit value\\n    /// @param _ticketID The ticketID from the delayed inbox of the cross-chain message.\\n    event sequencerFutureLimitSent(uint256 _ticketID);\\n\\n    /// @dev This event indicates the sequencer future limit updated.\\n    /// @param _newSequencerFutureLimit The new sequencer future limit.\\n    event sequencerFutureLimitUpdated(uint256 _newSequencerFutureLimit);\\n\\n    /// @dev This event indicates that a request to decrease the sequencer future limit has been made.\\n    /// @param _requestedSequencerFutureLimit The new sequencer limit requested.\\n    event sequencerFutureLimitDecreaseRequested(uint256 _requestedSequencerFutureLimit);\\n\\n    /// @dev Constructor.\\n    /// @param _bridge The address of the arbitrum bridge contract on Ethereum.\\n    /// @param _amb The address of the AMB contract on Ethereum.\\n    /// @param _veaInboxArbToGnosis The vea inbox on Arbitrum.\\n    /// @param _veaOutboxArbToGnosis The vea outbox on Gnosis Chain.\\n    /// @param _inboxChainId The chain ID of the inbox chain.\\n    constructor(\\n        IBridge _bridge,\\n        IAMB _amb,\\n        address _veaInboxArbToGnosis,\\n        address _veaOutboxArbToGnosis,\\n        uint256 _inboxChainId\\n    ) {\\n        bridge = _bridge;\\n        amb = _amb;\\n        veaInboxGnosisToArb = _veaInboxArbToGnosis;\\n        veaOutboxGnosisToArb = _veaOutboxArbToGnosis;\\n        inboxChainId = _inboxChainId;\\n\\n        updateSequencerDelayLimit();\\n    }\\n\\n    // ************************************* //\\n    // *        Parameter Updates          * //\\n    // ************************************* //\\n\\n    /// @dev Update the sequencerDelayLimit. If decreasing, a delayed request is created for later execution.\\n    function updateSequencerDelayLimit() public {\\n        // the maximum asynchronous lag between the L2 and L1 clocks\\n        (, , uint256 newSequencerDelayLimit, ) = ISequencerInbox(bridge.sequencerInbox()).maxTimeVariation();\\n\\n        if (newSequencerDelayLimit > sequencerDelayLimit) {\\n            // For sequencerDelayLimit / epochPeriod > timeoutEpochs, claims cannot be verified by the timeout period and the bridge will shutdown.\\n            sequencerDelayLimit = newSequencerDelayLimit;\\n            emit sequencerDelayLimitUpdated(newSequencerDelayLimit);\\n        } else if (newSequencerDelayLimit < sequencerDelayLimit) {\\n            require(\\n                sequencerDelayLimitDecreaseRequest.timestamp == 0,\\n                \\\"Sequencer limit decrease request already pending.\\\"\\n            );\\n\\n            sequencerDelayLimitDecreaseRequest = SequencerLimitDecreaseRequest({\\n                requestedSequencerLimit: newSequencerDelayLimit,\\n                timestamp: block.timestamp\\n            });\\n            emit sequencerDelayLimitDecreaseRequested(newSequencerDelayLimit);\\n        }\\n    }\\n\\n    /// @dev Update the sequencerFutureLimit. If decreasing, a delayed request is created for later execution.\\n    function updateSequencerFutureLimit() public {\\n        // the maximum asynchronous lag between the L2 and L1 clocks\\n        (, , , uint256 newSequencerFutureLimit) = ISequencerInbox(bridge.sequencerInbox()).maxTimeVariation();\\n\\n        if (newSequencerFutureLimit > sequencerFutureLimit) {\\n            // For sequencerFutureLimit / epochPeriod > timeoutEpochs, claims cannot be verified by the timeout period and the bridge will shutdown.\\n            sequencerFutureLimit = newSequencerFutureLimit;\\n            emit sequencerFutureLimitUpdated(newSequencerFutureLimit);\\n        } else if (newSequencerFutureLimit < sequencerFutureLimit) {\\n            require(\\n                sequencerFutureLimitDecreaseRequest.timestamp == 0,\\n                \\\"Sequencer limit decrease request already pending.\\\"\\n            );\\n\\n            sequencerFutureLimitDecreaseRequest = SequencerLimitDecreaseRequest({\\n                requestedSequencerLimit: newSequencerFutureLimit,\\n                timestamp: block.timestamp\\n            });\\n            emit sequencerFutureLimitDecreaseRequested(newSequencerFutureLimit);\\n        }\\n    }\\n\\n    /// @dev execute sequencerDelayLimitDecreaseRequest\\n    function executeSequencerDelayLimitDecreaseRequest() external {\\n        require(sequencerDelayLimitDecreaseRequest.timestamp != 0, \\\"No pending sequencer limit decrease request.\\\");\\n        require(\\n            block.timestamp > sequencerDelayLimitDecreaseRequest.timestamp + sequencerDelayLimit,\\n            \\\"Sequencer limit decrease request is still pending.\\\"\\n        );\\n\\n        uint256 requestedSequencerDelayLimit = sequencerDelayLimitDecreaseRequest.requestedSequencerLimit;\\n        delete sequencerDelayLimitDecreaseRequest;\\n\\n        (, , uint256 currentSequencerDelayLimit, ) = ISequencerInbox(bridge.sequencerInbox()).maxTimeVariation();\\n\\n        // check the request is still consistent with the arbiturm bridge\\n        if (currentSequencerDelayLimit == requestedSequencerDelayLimit) {\\n            sequencerDelayLimit = requestedSequencerDelayLimit;\\n            emit sequencerDelayLimitUpdated(requestedSequencerDelayLimit);\\n        }\\n    }\\n\\n    /// @dev execute sequencerFutureLimitDecreaseRequest\\n    function executeSequencerFutureLimitDecreaseRequest() external {\\n        require(sequencerFutureLimitDecreaseRequest.timestamp != 0, \\\"No pending sequencer limit decrease request.\\\");\\n        require(\\n            block.timestamp > sequencerFutureLimitDecreaseRequest.timestamp + sequencerFutureLimit,\\n            \\\"Sequencer limit decrease request is still pending.\\\"\\n        );\\n\\n        uint256 requestedSequencerFutureLimit = sequencerFutureLimitDecreaseRequest.requestedSequencerLimit;\\n        delete sequencerFutureLimitDecreaseRequest;\\n\\n        (, , , uint256 currentSequencerFutureLimit) = ISequencerInbox(bridge.sequencerInbox()).maxTimeVariation();\\n\\n        // check the request is still consistent with the arbiturm bridge\\n        if (currentSequencerFutureLimit == requestedSequencerFutureLimit) {\\n            sequencerFutureLimit = requestedSequencerFutureLimit;\\n            emit sequencerFutureLimitUpdated(requestedSequencerFutureLimit);\\n        }\\n    }\\n\\n    /// @dev Send the sequencer future limit through the delayed inbox.\\n    function sendSequencerFutureLimit(\\n        uint256 _inboxIndex,\\n        uint256 _maxSubmissionCost,\\n        address _excessFeeRefundAddress,\\n        uint256 _gasLimit,\\n        uint256 _maxFeePerGas\\n    ) external {\\n        uint256 msgValue = _maxSubmissionCost + _gasLimit * _maxFeePerGas;\\n        uint256 gasBalance = L2GasBalance[msg.sender];\\n\\n        require(gasBalance >= msgValue, \\\"Insufficient L2 gas balance.\\\");\\n\\n        L2GasBalance[msg.sender] = gasBalance - msgValue;\\n\\n        bytes memory data = abi.encodeCall(\\n            ISequencerFutureUpdatable.updateSequencerFutureLimit,\\n            (sequencerFutureLimit, block.timestamp)\\n        );\\n\\n        uint256 ticketID = IInbox(bridge.allowedDelayedInboxList(_inboxIndex)).createRetryableTicket{value: msgValue}(\\n            veaOutboxGnosisToArb,\\n            0, // no callvalue\\n            _maxSubmissionCost,\\n            _excessFeeRefundAddress,\\n            address(0), // no callvalue to refund, no one can cancel the ticket\\n            _gasLimit,\\n            _maxFeePerGas,\\n            data\\n        );\\n\\n        emit sequencerFutureLimitSent(ticketID);\\n    }\\n\\n    /// @dev Send the sequencer delay limit through the delayed inbox.\\n    function sendSequencerDelayLimit(\\n        uint256 _inboxIndex,\\n        uint256 _maxSubmissionCost,\\n        address _excessFeeRefundAddress,\\n        uint256 _gasLimit,\\n        uint256 _maxFeePerGas\\n    ) external {\\n        uint256 msgValue = _maxSubmissionCost + _gasLimit * _maxFeePerGas;\\n        uint256 gasBalance = L2GasBalance[msg.sender];\\n\\n        require(gasBalance >= msgValue, \\\"Insufficient L2 gas balance.\\\");\\n\\n        L2GasBalance[msg.sender] = gasBalance - msgValue;\\n\\n        bytes memory data = abi.encodeCall(\\n            ISequencerDelayUpdatable.updateSequencerDelayLimit,\\n            (sequencerDelayLimit, block.timestamp)\\n        );\\n\\n        uint256 ticketID = IInbox(bridge.allowedDelayedInboxList(_inboxIndex)).createRetryableTicket{value: msgValue}(\\n            veaOutboxGnosisToArb,\\n            0, // no callvalue\\n            _maxSubmissionCost,\\n            _excessFeeRefundAddress,\\n            address(0), // no callvalue to refund, no one can cancel the ticket\\n            _gasLimit,\\n            _maxFeePerGas,\\n            data\\n        );\\n\\n        emit sequencerDelayLimitSent(ticketID);\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    function deposit() external payable {\\n        L2GasBalance[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(L2GasBalance[msg.sender] > _amount, \\\"Insufficient balance.\\\");\\n        L2GasBalance[msg.sender] -= _amount;\\n        payable(msg.sender).send(_amount); // User is responsible for accepting ETH.\\n    }\\n\\n    /// Note: Access restricted to arbitrum canonical bridge.\\n    /// @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateroot The true state root for the epoch.\\n    /// @param _inboxIndex The index of the inbox in the Arbitrum bridge contract.\\n    /// @param _maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee.\\n    /// @param _excessFeeRefundAddress Address to refund any excess fee to.\\n    /// @param _gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).\\n    /// @param _maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).\\n    function route(\\n        uint256 _epoch,\\n        bytes32 _stateroot,\\n        uint256 _inboxIndex,\\n        uint256 _maxSubmissionCost,\\n        address _excessFeeRefundAddress,\\n        uint256 _gasLimit,\\n        uint256 _maxFeePerGas\\n    ) external {\\n        // Ethereum -> Gnosis message authentication with the AMB, the canonical Ethereum <-> Gnosis bridge.\\n        // https://docs.tokenbridge.net/amb-bridge/development-of-a-cross-chain-application/how-to-develop-xchain-apps-by-amb#receive-a-method-call-from-the-amb-bridge\\n\\n        require(msg.sender == address(amb), \\\"Not from native Gnosis AMB bridge.\\\");\\n        require(bytes32(inboxChainId) == amb.messageSourceChainId(), \\\"Invalid chain id.\\\");\\n        require(veaInboxGnosisToArb == amb.messageSender(), \\\"Vea Inbox only.\\\");\\n\\n        // Ethereum -> Arbitrum message passing with retryable tickets in the delayed inbox, the canonical Ethereum -> Arbitrum bridge.\\n        // https://developer.arbitrum.io/arbos/l1-to-l2-messaging#submission\\n\\n        uint256 msgValue = _maxSubmissionCost + _gasLimit * _maxFeePerGas;\\n        uint256 gasBalance = L2GasBalance[msg.sender];\\n\\n        require(gasBalance >= msgValue, \\\"Insufficient L2 gas balance.\\\");\\n\\n        L2GasBalance[msg.sender] = gasBalance - msgValue;\\n\\n        bytes memory data = abi.encodeCall(IVeaOutboxOnL2.resolveDisputedClaim, (_epoch, _stateroot));\\n\\n        uint256 ticketID = IInbox(bridge.allowedDelayedInboxList(_inboxIndex)).createRetryableTicket{value: msgValue}(\\n            veaOutboxGnosisToArb,\\n            0, // no callvalue\\n            _maxSubmissionCost,\\n            _excessFeeRefundAddress,\\n            address(0), // no callvalue to refund, no one can cancel the ticket\\n            _gasLimit,\\n            _maxFeePerGas,\\n            data\\n        );\\n\\n        emit Routed(_epoch, ticketID);\\n    }\\n}\\n\",\"keccak256\":\"0xaab3a5d9b5a52671af6336f05306c66627bfe25dbf0dd51fc88882c14da15a3d\",\"license\":\"MIT\"},\"src/interfaces/outboxes/IVeaOutboxOnL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of the Vea Outbox on Optimistic Rollup L2s like Arbitrum, Optimism, Base, Specular where L2 storage is inexpensive compared to L1 calldata.\\ninterface IVeaOutboxOnL2 {\\n    /// @dev Verifies and relays the message.\\n    /// Note: Gateways expect first argument of message call to be the inbox sender, used for authentication.\\n    /// @param _proof The merkle proof to prove the message.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address to send the message to.\\n    /// @param _message The message to relay.\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external;\\n\\n    /// @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n    /// Note: Access restricted to canonical bridge.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external;\\n}\\n\",\"keccak256\":\"0x22ece6282ad246dcc086d100644a479be0cee8307d4b5c1440110241002ca013\",\"license\":\"MIT\"},\"src/interfaces/routers/IRouterToArb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of the Vea Router intended to be deployed on an intermediary chain which routes messages to Arbitrum where calldata is the primary cost.\\n///      eg. Gnosis (L1) -> Ethereum (L1) -> Arbitrum (L2), the IRouterToL2 will be deployed on Ethereum (L1) routing messages to Arbitrum (L2).\\ninterface IRouterToArb {\\n    /// @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n    /// Note: Access restricted to canonical sending-chain bridge.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateroot The true state root for the epoch.\\n    /// @param _inboxIndex The index of the inbox in the Arbitrum bridge contract.\\n    /// @param _maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n    /// @param _excessFeeRefundAddress Address to refund any excess fee to\\n    /// @param _gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n    /// @param _maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n    function route(\\n        uint256 _epoch,\\n        bytes32 _stateroot,\\n        uint256 _inboxIndex,\\n        uint256 _maxSubmissionCost,\\n        address _excessFeeRefundAddress,\\n        uint256 _gasLimit,\\n        uint256 _maxFeePerGas\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc265211871b748c9191df4fd6419d57abf030314ee5ef7aa89f14a863521f174\",\"license\":\"MIT\"},\"src/interfaces/updaters/ISequencerDelayUpdatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of a contract which is updatable, receiving parameter updates from an L1 contract through a cross-chain call.\\n/// @dev eg. Arbitrum (L2) -> Ethereum (L1) -> Gnosis (L1), the veaOutbox on Gnosis will be an ISequencerDelayUpdatable contract which receives updates from the router on Ethereum.\\ninterface ISequencerDelayUpdatable {\\n    /// @dev Updates the sequencer limit.\\n    /// Note: Access restricted to ensure the argument is passed from the Sequencer contract.\\n    /// @param _newSequencerDelayLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerDelayLimit(uint256 _newSequencerDelayLimit, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0xa99728056c1360f321ddac49c565ed0d4f2094569aaca3a2523df9f833e83925\",\"license\":\"MIT\"},\"src/interfaces/updaters/ISequencerFutureUpdatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of a contract which is updatable, receiving parameter updates from an L1 contract through a cross-chain call.\\n/// @dev eg. Arbitrum (L2) -> Ethereum (L1) -> Gnosis (L1), the veaOutbox on Gnosis will be an ISequencerFutureUpdatable contract which receives updates from the router on Ethereum.\\ninterface ISequencerFutureUpdatable {\\n    /// @dev Updates the sequencer limit.\\n    /// Note: Access restricted to ensure the argument is passed from the Sequencer contract.\\n    /// @param _newSequencerFutureLimit The futureSeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerFutureLimit(uint256 _newSequencerFutureLimit, uint256 _timestamp) external;\\n}\\n\",\"keccak256\":\"0x5c8b8ffaec923126ec1699d9c1483329b5a660837803aefc4aa95d9f091ef21f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001aeb38038062001aeb833981016040819052620000359162000268565b6001600160a01b0380861660805284811660a05283811660c052821660e052610100819052620000646200006f565b50505050506200033a565b60006080516001600160a01b031663ee35f3276040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d89190620002dc565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa15801562000116573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013c919062000303565b5092505050600154811115620001875760018190556040518181527f611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b9060200160405180910390a150565b6001548110156200024f5760045415620002015760405162461bcd60e51b815260206004820152603160248201527f53657175656e636572206c696d697420646563726561736520726571756573746044820152701030b63932b0b23c903832b73234b7339760791b606482015260840160405180910390fd5b604080518082018252828152426020918201819052600384905560045590518281527fa552b382e128c9d0732f01f09502c18999aec5dce0ed78c5af0ea2274ce9bd7d910160405180910390a15b50565b6001600160a01b03811681146200024f57600080fd5b600080600080600060a086880312156200028157600080fd5b85516200028e8162000252565b6020870151909550620002a18162000252565b6040870151909450620002b48162000252565b6060870151909350620002c78162000252565b80925050608086015190509295509295909350565b600060208284031215620002ef57600080fd5b8151620002fc8162000252565b9392505050565b600080600080608085870312156200031a57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60805160a05160c05160e0516101005161170a620003e1600039600061085501526000818161021101528181610aed0152818161105401526112700152600081816102d7015261094201526000818161019001528181610759015281816107d301526108b701526000818161035301528181610410015281816105a401528181610a6f01528181610bc801528181610d7301528181610fd601526111f2015261170a6000f3fe6080604052600436106101095760003560e01c806365b0183511610095578063b6d7aeff11610064578063b6d7aeff146102f9578063c4977c8b14610319578063d0e30db014610339578063e78cea9214610341578063e813a7551461037557600080fd5b806365b018351461026857806377a43648146102955780637e260880146102aa5780639e75a705146102c557600080fd5b80631ff47dc0116100dc5780631ff47dc0146101ca5780632e1a7d4d146101df5780634738b97f146101ff578063507b5ad3146102335780635f43a47f1461025357600080fd5b8063051d19701461010e5780630c63fa84146101435780630e56752e1461015a5780631062b39a1461017e575b600080fd5b34801561011a57600080fd5b50600354600454610129919082565b604080519283526020830191909152015b60405180910390f35b34801561014f57600080fd5b5061015861038b565b005b34801561016657600080fd5b5061017060025481565b60405190815260200161013a565b34801561018a57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013a565b3480156101d657600080fd5b50610158610528565b3480156101eb57600080fd5b506101586101fa366004611357565b6106b5565b34801561020b57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561023f57600080fd5b5061015861024e366004611385565b61074e565b34801561025f57600080fd5b50610158610bc4565b34801561027457600080fd5b506101706102833660046113e4565b60006020819052908152604090205481565b3480156102a157600080fd5b50610158610d6f565b3480156102b657600080fd5b50600554600654610129919082565b3480156102d157600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561030557600080fd5b50610158610314366004611408565b610f0c565b34801561032557600080fd5b50610158610334366004611408565b611128565b610158611331565b34801561034d57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561038157600080fd5b5061017060015481565b6004546000036103b65760405162461bcd60e51b81526004016103ad90611451565b60405180910390fd5b6001546004546103c691906114b3565b42116103e45760405162461bcd60e51b81526004016103ad906114cc565b6003805460009182905560048281556040805163ee35f32760e01b815290519293926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263ee35f327928082019260209290918290030181865afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de919061153b565b50925050508181036105245760018290556040518281527f611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b906020015b60405180910390a15b5050565b60065460000361054a5760405162461bcd60e51b81526004016103ad90611451565b60025460065461055a91906114b3565b42116105785760405162461bcd60e51b81526004016103ad906114cc565b6005805460009182905560068290556040805163ee35f32760e01b815290519192916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163ee35f3279160048083019260209291908290030181865afa1580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610613919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610674919061153b565b93505050508181036105245760028290556040518281527fa36c22774e909c9fbb1635e8fb6d13dfb82e0bfd536fc98e7e5697c62b04b2719060200161051b565b33600090815260208190526040902054811061070b5760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a103130b630b731b29760591b60448201526064016103ad565b336000908152602081905260408120805483929061072a908490611571565b9091555050604051339082156108fc029083906000818181858888f1505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107d15760405162461bcd60e51b815260206004820152602260248201527f4e6f742066726f6d206e617469766520476e6f73697320414d42206272696467604482015261329760f11b60648201526084016103ad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611584565b7f0000000000000000000000000000000000000000000000000000000000000000146108b55760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016103ad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610937919061151e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109a95760405162461bcd60e51b815260206004820152600f60248201526e2b32b09024b73137bc1037b7363c9760891b60448201526064016103ad565b60006109b5828461159d565b6109bf90866114b3565b33600090815260208190526040902054909150818110156109f25760405162461bcd60e51b81526004016103ad906115b4565b6109fc8282611571565b33600090815260208190526040808220929092559051602481018b9052604481018a905260640160408051601f198184030181529181526020820180516001600160e01b0316631195d6f560e31b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b8152600401610b389897969594939291906115eb565b60206040518083038185885af1158015610b56573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b7b9190611584565b90508a7fcafd272887d09c9615b3354aa56a477e3ba7b4095d0b6201235c2bfabe2294c582604051610baf91815260200190565b60405180910390a25050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee35f3276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c48919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca9919061153b565b5092505050600154811115610cf45760018190556040518181527f611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b906020015b60405180910390a150565b600154811015610d6c5760045415610d1e5760405162461bcd60e51b81526004016103ad90611683565b604080518082018252828152426020918201819052600384905560045590518281527fa552b382e128c9d0732f01f09502c18999aec5dce0ed78c5af0ea2274ce9bd7d910160405180910390a15b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee35f3276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df3919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061153b565b9350505050600254811115610e985760028190556040518181527fa36c22774e909c9fbb1635e8fb6d13dfb82e0bfd536fc98e7e5697c62b04b27190602001610ce9565b600254811015610d6c5760065415610ec25760405162461bcd60e51b81526004016103ad90611683565b604080518082018252828152426020918201819052600584905560065590518281527f326636d2e3d2c0d42c0fb6fd9f30ab0fcde3dff35e63db28f8abc38d566057f49101610ce9565b6000610f18828461159d565b610f2290866114b3565b3360009081526020819052604090205490915081811015610f555760405162461bcd60e51b81526004016103ad906115b4565b610f5f8282611571565b3360009081526020819052604080822092909255600254915160248101929092524260448301529060640160408051601f198184030181529181526020820180516001600160e01b031663710cc9a760e01b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af115801561101f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611043919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b815260040161109f9897969594939291906115eb565b60206040518083038185885af11580156110bd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110e29190611584565b90507f0bb0de69fc6722b8061f8161f450a46b49fd536c11535aab912024d630d505cf8160405161111591815260200190565b60405180910390a1505050505050505050565b6000611134828461159d565b61113e90866114b3565b33600090815260208190526040902054909150818110156111715760405162461bcd60e51b81526004016103ad906115b4565b61117b8282611571565b3360009081526020819052604080822092909255600154915160248101929092524260448301529060640160408051601f198184030181529181526020820180516001600160e01b0316632c19251960e01b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af115801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b81526004016112bb9897969594939291906115eb565b60206040518083038185885af11580156112d9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112fe9190611584565b90507fe68d5d0ca95adf855ddd4733abf1d205e40aaef86e1c7795f4002791d5e28a388160405161111591815260200190565b33600090815260208190526040812080543492906113509084906114b3565b9091555050565b60006020828403121561136957600080fd5b5035919050565b6001600160a01b0381168114610d6c57600080fd5b600080600080600080600060e0888a0312156113a057600080fd5b8735965060208801359550604088013594506060880135935060808801356113c781611370565b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156113f657600080fd5b813561140181611370565b9392505050565b600080600080600060a0868803121561142057600080fd5b8535945060208601359350604086013561143981611370565b94979396509394606081013594506080013592915050565b6020808252602c908201527f4e6f2070656e64696e672073657175656e636572206c696d697420646563726560408201526b30b9b2903932b8bab2b9ba1760a11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156114c6576114c661149d565b92915050565b60208082526032908201527f53657175656e636572206c696d697420646563726561736520726571756573746040820152711034b99039ba34b636103832b73234b7339760711b606082015260800190565b60006020828403121561153057600080fd5b815161140181611370565b6000806000806080858703121561155157600080fd5b505082516020840151604085015160609095015191969095509092509050565b818103818111156114c6576114c661149d565b60006020828403121561159657600080fd5b5051919050565b80820281158282048414176114c6576114c661149d565b6020808252601c908201527f496e73756666696369656e74204c32206761732062616c616e63652e00000000604082015260600190565b600061010060018060a01b03808c16845260208b818601528a6040860152818a16606086015281891660808601528760a08601528660c08601528260e0860152855191508183860152600092505b8183101561165857858301810151858401610120015291820191611639565b506101209150600082828601015281601f19601f830116850101925050509998505050505050505050565b60208082526031908201527f53657175656e636572206c696d697420646563726561736520726571756573746040820152701030b63932b0b23c903832b73234b7339760791b60608201526080019056fea2646970667358221220535f232bc393000c0245713b2c0e8c68054ae9cbf7af42338a97ed188b8ad73164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806365b0183511610095578063b6d7aeff11610064578063b6d7aeff146102f9578063c4977c8b14610319578063d0e30db014610339578063e78cea9214610341578063e813a7551461037557600080fd5b806365b018351461026857806377a43648146102955780637e260880146102aa5780639e75a705146102c557600080fd5b80631ff47dc0116100dc5780631ff47dc0146101ca5780632e1a7d4d146101df5780634738b97f146101ff578063507b5ad3146102335780635f43a47f1461025357600080fd5b8063051d19701461010e5780630c63fa84146101435780630e56752e1461015a5780631062b39a1461017e575b600080fd5b34801561011a57600080fd5b50600354600454610129919082565b604080519283526020830191909152015b60405180910390f35b34801561014f57600080fd5b5061015861038b565b005b34801561016657600080fd5b5061017060025481565b60405190815260200161013a565b34801561018a57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013a565b3480156101d657600080fd5b50610158610528565b3480156101eb57600080fd5b506101586101fa366004611357565b6106b5565b34801561020b57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561023f57600080fd5b5061015861024e366004611385565b61074e565b34801561025f57600080fd5b50610158610bc4565b34801561027457600080fd5b506101706102833660046113e4565b60006020819052908152604090205481565b3480156102a157600080fd5b50610158610d6f565b3480156102b657600080fd5b50600554600654610129919082565b3480156102d157600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561030557600080fd5b50610158610314366004611408565b610f0c565b34801561032557600080fd5b50610158610334366004611408565b611128565b610158611331565b34801561034d57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561038157600080fd5b5061017060015481565b6004546000036103b65760405162461bcd60e51b81526004016103ad90611451565b60405180910390fd5b6001546004546103c691906114b3565b42116103e45760405162461bcd60e51b81526004016103ad906114cc565b6003805460009182905560048281556040805163ee35f32760e01b815290519293926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263ee35f327928082019260209290918290030181865afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de919061153b565b50925050508181036105245760018290556040518281527f611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b906020015b60405180910390a15b5050565b60065460000361054a5760405162461bcd60e51b81526004016103ad90611451565b60025460065461055a91906114b3565b42116105785760405162461bcd60e51b81526004016103ad906114cc565b6005805460009182905560068290556040805163ee35f32760e01b815290519192916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163ee35f3279160048083019260209291908290030181865afa1580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610613919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610674919061153b565b93505050508181036105245760028290556040518281527fa36c22774e909c9fbb1635e8fb6d13dfb82e0bfd536fc98e7e5697c62b04b2719060200161051b565b33600090815260208190526040902054811061070b5760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a103130b630b731b29760591b60448201526064016103ad565b336000908152602081905260408120805483929061072a908490611571565b9091555050604051339082156108fc029083906000818181858888f1505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107d15760405162461bcd60e51b815260206004820152602260248201527f4e6f742066726f6d206e617469766520476e6f73697320414d42206272696467604482015261329760f11b60648201526084016103ad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611584565b7f0000000000000000000000000000000000000000000000000000000000000000146108b55760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21031b430b4b71034b21760791b60448201526064016103ad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610937919061151e565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109a95760405162461bcd60e51b815260206004820152600f60248201526e2b32b09024b73137bc1037b7363c9760891b60448201526064016103ad565b60006109b5828461159d565b6109bf90866114b3565b33600090815260208190526040902054909150818110156109f25760405162461bcd60e51b81526004016103ad906115b4565b6109fc8282611571565b33600090815260208190526040808220929092559051602481018b9052604481018a905260640160408051601f198184030181529181526020820180516001600160e01b0316631195d6f560e31b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b8152600401610b389897969594939291906115eb565b60206040518083038185885af1158015610b56573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610b7b9190611584565b90508a7fcafd272887d09c9615b3354aa56a477e3ba7b4095d0b6201235c2bfabe2294c582604051610baf91815260200190565b60405180910390a25050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee35f3276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c48919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca9919061153b565b5092505050600154811115610cf45760018190556040518181527f611c2e4a78552f908fb0eb2cc503efc1f947cde8574277ab3b0f10fdd510258b906020015b60405180910390a150565b600154811015610d6c5760045415610d1e5760405162461bcd60e51b81526004016103ad90611683565b604080518082018252828152426020918201819052600384905560045590518281527fa552b382e128c9d0732f01f09502c18999aec5dce0ed78c5af0ea2274ce9bd7d910160405180910390a15b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee35f3276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df3919061151e565b6001600160a01b031663ebea461d6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061153b565b9350505050600254811115610e985760028190556040518181527fa36c22774e909c9fbb1635e8fb6d13dfb82e0bfd536fc98e7e5697c62b04b27190602001610ce9565b600254811015610d6c5760065415610ec25760405162461bcd60e51b81526004016103ad90611683565b604080518082018252828152426020918201819052600584905560065590518281527f326636d2e3d2c0d42c0fb6fd9f30ab0fcde3dff35e63db28f8abc38d566057f49101610ce9565b6000610f18828461159d565b610f2290866114b3565b3360009081526020819052604090205490915081811015610f555760405162461bcd60e51b81526004016103ad906115b4565b610f5f8282611571565b3360009081526020819052604080822092909255600254915160248101929092524260448301529060640160408051601f198184030181529181526020820180516001600160e01b031663710cc9a760e01b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af115801561101f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611043919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b815260040161109f9897969594939291906115eb565b60206040518083038185885af11580156110bd573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110e29190611584565b90507f0bb0de69fc6722b8061f8161f450a46b49fd536c11535aab912024d630d505cf8160405161111591815260200190565b60405180910390a1505050505050505050565b6000611134828461159d565b61113e90866114b3565b33600090815260208190526040902054909150818110156111715760405162461bcd60e51b81526004016103ad906115b4565b61117b8282611571565b3360009081526020819052604080822092909255600154915160248101929092524260448301529060640160408051601f198184030181529181526020820180516001600160e01b0316632c19251960e01b1790525163e76f5c8d60e01b8152600481018a90529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e76f5c8d906024016020604051808303816000875af115801561123b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125f919061151e565b6001600160a01b031663679b6ded857f000000000000000000000000000000000000000000000000000000000000000060008c8c60008d8d8b6040518a63ffffffff1660e01b81526004016112bb9897969594939291906115eb565b60206040518083038185885af11580156112d9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112fe9190611584565b90507fe68d5d0ca95adf855ddd4733abf1d205e40aaef86e1c7795f4002791d5e28a388160405161111591815260200190565b33600090815260208190526040812080543492906113509084906114b3565b9091555050565b60006020828403121561136957600080fd5b5035919050565b6001600160a01b0381168114610d6c57600080fd5b600080600080600080600060e0888a0312156113a057600080fd5b8735965060208801359550604088013594506060880135935060808801356113c781611370565b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156113f657600080fd5b813561140181611370565b9392505050565b600080600080600060a0868803121561142057600080fd5b8535945060208601359350604086013561143981611370565b94979396509394606081013594506080013592915050565b6020808252602c908201527f4e6f2070656e64696e672073657175656e636572206c696d697420646563726560408201526b30b9b2903932b8bab2b9ba1760a11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156114c6576114c661149d565b92915050565b60208082526032908201527f53657175656e636572206c696d697420646563726561736520726571756573746040820152711034b99039ba34b636103832b73234b7339760711b606082015260800190565b60006020828403121561153057600080fd5b815161140181611370565b6000806000806080858703121561155157600080fd5b505082516020840151604085015160609095015191969095509092509050565b818103818111156114c6576114c661149d565b60006020828403121561159657600080fd5b5051919050565b80820281158282048414176114c6576114c661149d565b6020808252601c908201527f496e73756666696369656e74204c32206761732062616c616e63652e00000000604082015260600190565b600061010060018060a01b03808c16845260208b818601528a6040860152818a16606086015281891660808601528760a08601528660c08601528260e0860152855191508183860152600092505b8183101561165857858301810151858401610120015291820191611639565b506101209150600082828601015281601f19601f830116850101925050509998505050505050505050565b60208082526031908201527f53657175656e636572206c696d697420646563726561736520726571756573746040820152701030b63932b0b23c903832b73234b7339760791b60608201526080019056fea2646970667358221220535f232bc393000c0245713b2c0e8c68054ae9cbf7af42338a97ed188b8ad73164736f6c63430008120033",
  "devdoc": {
    "details": "Router from Gnosis Chain to Arbitrum. Note: This contract is deployed on Ethereum.",
    "events": {
      "Routed(uint256,uint256)": {
        "details": "Event emitted when a message is relayed to another Safe Bridge.",
        "params": {
          "_epoch": "The epoch of the batch requested to send.",
          "_ticketID": "The unique identifier provided by the underlying canonical bridge."
        }
      },
      "sequencerDelayLimitDecreaseRequested(uint256)": {
        "details": "This event indicates that a request to decrease the sequencer delay limit has been made.",
        "params": {
          "_requestedSequencerDelayLimit": "The new sequencer limit requested."
        }
      },
      "sequencerDelayLimitSent(uint256)": {
        "details": "This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer delay limit value",
        "params": {
          "_ticketID": "The ticketID from the delayed inbox of the cross-chain message."
        }
      },
      "sequencerDelayLimitUpdated(uint256)": {
        "details": "This event indicates the sequencer delay limit updated.",
        "params": {
          "_newSequencerDelayLimit": "The new sequencer delay limit."
        }
      },
      "sequencerFutureLimitDecreaseRequested(uint256)": {
        "details": "This event indicates that a request to decrease the sequencer future limit has been made.",
        "params": {
          "_requestedSequencerFutureLimit": "The new sequencer limit requested."
        }
      },
      "sequencerFutureLimitSent(uint256)": {
        "details": "This event indicates a cross-chain message was sent to inform the veaOutbox of the sequencer future limit value",
        "params": {
          "_ticketID": "The ticketID from the delayed inbox of the cross-chain message."
        }
      },
      "sequencerFutureLimitUpdated(uint256)": {
        "details": "This event indicates the sequencer future limit updated.",
        "params": {
          "_newSequencerFutureLimit": "The new sequencer future limit."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_amb": "The address of the AMB contract on Ethereum.",
          "_bridge": "The address of the arbitrum bridge contract on Ethereum.",
          "_inboxChainId": "The chain ID of the inbox chain.",
          "_veaInboxArbToGnosis": "The vea inbox on Arbitrum.",
          "_veaOutboxArbToGnosis": "The vea outbox on Gnosis Chain."
        }
      },
      "executeSequencerDelayLimitDecreaseRequest()": {
        "details": "execute sequencerDelayLimitDecreaseRequest"
      },
      "executeSequencerFutureLimitDecreaseRequest()": {
        "details": "execute sequencerFutureLimitDecreaseRequest"
      },
      "route(uint256,bytes32,uint256,uint256,address,uint256,uint256)": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch to verify.",
          "_excessFeeRefundAddress": "Address to refund any excess fee to.",
          "_gasLimit": "Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).",
          "_inboxIndex": "The index of the inbox in the Arbitrum bridge contract.",
          "_maxFeePerGas": "price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error).",
          "_maxSubmissionCost": "Max gas deducted from user's L2 balance to cover base submission fee.",
          "_stateroot": "The true state root for the epoch."
        }
      },
      "sendSequencerDelayLimit(uint256,uint256,address,uint256,uint256)": {
        "details": "Send the sequencer delay limit through the delayed inbox."
      },
      "sendSequencerFutureLimit(uint256,uint256,address,uint256,uint256)": {
        "details": "Send the sequencer future limit through the delayed inbox."
      },
      "updateSequencerDelayLimit()": {
        "details": "Update the sequencerDelayLimit. If decreasing, a delayed request is created for later execution."
      },
      "updateSequencerFutureLimit()": {
        "details": "Update the sequencerFutureLimit. If decreasing, a delayed request is created for later execution."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "route(uint256,bytes32,uint256,uint256,address,uint256,uint256)": {
        "notice": "Note: Access restricted to arbitrum canonical bridge."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5101,
        "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
        "label": "L2GasBalance",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5103,
        "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
        "label": "sequencerDelayLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5105,
        "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
        "label": "sequencerFutureLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5108,
        "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
        "label": "sequencerDelayLimitDecreaseRequest",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(SequencerLimitDecreaseRequest)5116_storage"
      },
      {
        "astId": 5111,
        "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
        "label": "sequencerFutureLimitDecreaseRequest",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(SequencerLimitDecreaseRequest)5116_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SequencerLimitDecreaseRequest)5116_storage": {
        "encoding": "inplace",
        "label": "struct RouterGnosisToArb.SequencerLimitDecreaseRequest",
        "members": [
          {
            "astId": 5113,
            "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
            "label": "requestedSequencerLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5115,
            "contract": "src/gnosisToArbitrum/RouterGnosisToArb.sol:RouterGnosisToArb",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
