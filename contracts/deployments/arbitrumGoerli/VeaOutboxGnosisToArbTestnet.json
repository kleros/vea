{
  "address": "0x18AB70ea8dBc7072D1C1C90bA0bC1547d92198CF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeoutEpochs",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_routerGnosisToArb",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sequencerFutureLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "Verified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerDelayLimitUpdateReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newSequencerFutureLimit",
          "type": "uint256"
        }
      ],
      "name": "sequencerFutureLimitUpdateReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_disputedStateRoot",
          "type": "bytes32"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "enum VeaOutboxGnosisToArb.Party",
          "name": "honest",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositPlusReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_msgId",
          "type": "uint256"
        }
      ],
      "name": "isMsgRelayed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRelayed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestVerifiedEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_stateRoot",
          "type": "bytes32"
        }
      ],
      "name": "resolveDisputedClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerGnosisToArb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_msgId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerDelayLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerFutureLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeoutEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampDelayUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampFutureUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSequencerDelayLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerDelayLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSequencerFutureLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateSequencerFutureLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "verifySnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawChallengerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "withdrawClaimerEscapeHatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce5e6121a5f97ecc4879e53ac01c81e76edda2ff561b6bae320eae44c39ae4ad",
  "receipt": {
    "to": null,
    "from": "0x407DDEC61d69b212498B140a26da70AE1C879f5a",
    "contractAddress": "0x18AB70ea8dBc7072D1C1C90bA0bC1547d92198CF",
    "transactionIndex": 1,
    "gasUsed": "1766439",
    "logsBloom": "0x
    "blockHash": "0x81f6ce4228226eab44ba0bc14ffd43352e7bd87729631884852ee5937cf5d4cb",
    "transactionHash": "0xce5e6121a5f97ecc4879e53ac01c81e76edda2ff561b6bae320eae44c39ae4ad",
    "logs": [],
    "blockNumber": 29413141,
    "cumulativeGasUsed": "1766439",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "4000000000000000000",
    7200,
    86400,
    168,
    "0x6bC3C7Bcd2C6C2d8BFEAA3642c425cAE25F7fe17",
    86400,
    3600
  ],
  "numDeployments": 8,
  "solcInputHash": "18d8b299616ba6ea1bb506a660a35de5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeoutEpochs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerGnosisToArb\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerFutureLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"Verified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerDelayLimitUpdateReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSequencerFutureLimit\",\"type\":\"uint256\"}],\"name\":\"sequencerFutureLimitUpdateReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_disputedStateRoot\",\"type\":\"bytes32\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"enum VeaOutboxGnosisToArb.Party\",\"name\":\"honest\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPlusReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"epochAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_msgId\",\"type\":\"uint256\"}],\"name\":\"isMsgRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRelayed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestVerifiedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_stateRoot\",\"type\":\"bytes32\"}],\"name\":\"resolveDisputedClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerGnosisToArb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_msgId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerDelayLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerFutureLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeoutEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampDelayUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampFutureUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSequencerDelayLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSequencerDelayLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSequencerFutureLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSequencerFutureLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"verifySnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawChallengerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"withdrawClaimerEscapeHatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vea Outbox From Gnosis to Arbitrum. Note: This contract is deployed on Arbitrum.\",\"events\":{\"Challenged(uint256,address)\":{\"details\":\"This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_epoch\":\"The epoch associated with the challenged claim.\"}},\"Claimed(address,uint256,bytes32)\":{\"details\":\"Watchers check this event to challenge fraud.\",\"params\":{\"_claimer\":\"The address of the claimer.\",\"_epoch\":\"The epoch associated with the claim.\",\"_stateRoot\":\"The state root of the claim.\"}},\"MessageRelayed(uint64)\":{\"details\":\"This event indicates that a message has been relayed.\",\"params\":{\"_msgId\":\"The msgId of the message that was relayed.\"}},\"Verified(uint256)\":{\"details\":\"This events indicates that verification has succeeded. The messages are ready to be relayed.\",\"params\":{\"_epoch\":\"The epoch that was verified.\"}},\"sequencerDelayLimitUpdateReceived(uint256)\":{\"details\":\"This event indicates the sequencer delay limit updated.\",\"params\":{\"_newSequencerDelayLimit\":\"The new max sequencer past timestamping power.\"}},\"sequencerFutureLimitUpdateReceived(uint256)\":{\"details\":\"This event indicates the sequencer futue limit updated.\",\"params\":{\"_newSequencerFutureLimit\":\"The new max sequencer future timestamping power.\"}}},\"kind\":\"dev\",\"methods\":{\"challenge(uint256,bytes32)\":{\"details\":\"Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\",\"params\":{\"_disputedStateRoot\":\"The claimed state root to challenge, included to ensure txn reverts if claim is removed due to a block reorg.\",\"_epoch\":\"The epoch of the claim to challenge.\"}},\"claim(uint256,bytes32)\":{\"details\":\"Submit a claim about the _stateRoot at _epoch and submit a deposit.\",\"params\":{\"_epoch\":\"The epoch for which the claim is made.\",\"_stateRoot\":\"The state root to claim.\"}},\"constructor\":{\"details\":\"Constructor. Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\",\"params\":{\"_challengePeriod\":\"The duration of the period allowing to challenge a claim.\",\"_deposit\":\"The deposit amount to submit a claim in wei.\",\"_epochPeriod\":\"The duration of each epoch.\",\"_routerGnosisToArb\":\"The address of the router on Ethereum that routes from Arbitrum to Ethereum.\",\"_sequencerDelayLimit\":\"The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\",\"_sequencerFutureLimit\":\"The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.\",\"_timeoutEpochs\":\"The epochs before the bridge is considered shutdown.\"}},\"epochAt(uint256)\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"epochNow()\":{\"details\":\"Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\",\"returns\":{\"epoch\":\"The hash of the claim.\"}},\"isMsgRelayed(uint256)\":{\"details\":\"Get the msg relayed status.\",\"params\":{\"_msgId\":\"The msgId to check.\"},\"returns\":{\"isRelayed\":\"True if the msg was relayed.\"}},\"resolveDisputedClaim(uint256,bytes32)\":{\"details\":\"Resolves any challenge of the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch to verify.\",\"_stateRoot\":\"The true state root for the epoch.\"}},\"sendMessage(bytes32[],uint64,address,bytes)\":{\"details\":\"Verifies and relays the message. UNTRUSTED.\",\"params\":{\"_message\":\"The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)\",\"_msgId\":\"The zero based index of the message in the inbox.\",\"_proof\":\"The merkle proof to prove the message inclusion in the inbox state root.\",\"_to\":\"The address of the contract on Arbitrum to call.\"}},\"updateSequencerDelayLimit(uint256,uint256)\":{\"details\":\"Set the sequencerDelayLimit by reading from the Arbitrum Bridge\",\"params\":{\"_newSequencerDelayLimit\":\"The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\",\"_timestamp\":\"The timestamp of the message.\"}},\"updateSequencerFutureLimit(uint256,uint256)\":{\"details\":\"Set the sequencerFutureLimit by reading from the Arbitrum Bridge\",\"params\":{\"_newSequencerFutureLimit\":\"The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\",\"_timestamp\":\"The timestamp of the message.\"}},\"verifySnapshot(uint256)\":{\"details\":\"Resolves the optimistic claim for '_epoch'.\",\"params\":{\"_epoch\":\"The epoch of the optimistic claim.\"}},\"withdrawChallengeDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the challenge deposit to withraw.\"}},\"withdrawChallengerEscapeHatch(uint256)\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimDeposit(uint256)\":{\"details\":\"Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}},\"withdrawClaimerEscapeHatch(uint256)\":{\"details\":\"When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\",\"params\":{\"_epoch\":\"The epoch associated with the claim deposit to withraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolveDisputedClaim(uint256,bytes32)\":{\"notice\":\"Note: Access restricted to AMB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol\":\"VeaOutboxGnosisToArb\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/canonical/arbitrum/AddressAliasHelper.sol\":{\"content\":\"// https://github.com/OffchainLabs/nitro-contracts/blob/08ac127e966fa87a4d5ba3d23cd3132b57701132/src/libraries/AddressAliasHelper.sol\\n// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressAliasHelper {\\n    uint160 internal constant OFFSET = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        unchecked {\\n            l2Address = address(uint160(l1Address) + OFFSET);\\n        }\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        unchecked {\\n            l1Address = address(uint160(l2Address) - OFFSET);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa8b6907a33c37e13b3de6e2459d6bd153708be4b8413db3c319ea3a5d8c9b00\",\"license\":\"BUSL-1.1\"},\"src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/outboxes/IVeaOutboxOnL2.sol\\\";\\nimport \\\"../canonical/arbitrum/AddressAliasHelper.sol\\\";\\n\\n/// @dev Vea Outbox From Gnosis to Arbitrum.\\n/// Note: This contract is deployed on Arbitrum.\\ncontract VeaOutboxGnosisToArb is IVeaOutboxOnL2 {\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    address public immutable routerGnosisToArb; // The address of the router from Gnosis to Arbitrum on Ethereum.\\n\\n    uint256 public immutable deposit; // The deposit in wei required to submit a claim or challenge\\n    uint256 public immutable burn; // The amount of wei to burn. deposit / 2\\n    uint256 public immutable depositPlusReward; // 2 * deposit - burn\\n\\n    address public constant BURN_ADDRESS = address(0); // address to send burned eth\\n\\n    uint256 public immutable epochPeriod; // Epochs mark the period between potential snapshots.\\n    uint256 public immutable challengePeriod; // Claim challenge timewindow.\\n    uint256 public immutable timeoutEpochs; // The number of epochs without forward progress before the bridge is considered shutdown.\\n\\n    uint256 public sequencerDelayLimit; // This is MaxTimeVariation.delaySeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can backdate L2 txns relative to the L1 clock.\\n    uint256 public sequencerFutureLimit; // This is MaxTimeVariation.futureSeconds from the arbitrum sequencer inbox, it is the maximum seconds the sequencer can futuredate L2 txns relative to the L1 clock.\\n    uint256 public timestampDelayUpdated; // The timestamp of the last sequencer delay update.\\n    uint256 public timestampFutureUpdated; // The timestamp of the last sequencer future update.\\n\\n    bytes32 public stateRoot; // merkle root of the outbox state\\n    uint256 public latestVerifiedEpoch; // The latest epoch that has been verified.\\n\\n    mapping(uint256 => Claim) public claims; // epoch => claim\\n    mapping(uint256 => address) public challengers; // epoch => challenger\\n    mapping(uint256 => bytes32) internal relayed; // msgId/256 => packed replay bitmap, preferred over a simple boolean mapping to save 15k gas per message\\n\\n    enum Party {\\n        None,\\n        Claimer,\\n        Challenger\\n    }\\n\\n    struct Claim {\\n        bytes32 stateRoot;\\n        address claimer;\\n        uint32 timestamp;\\n        Party honest;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Watchers check this event to challenge fraud.\\n    /// @param _claimer The address of the claimer.\\n    /// @param _epoch The epoch associated with the claim.\\n    /// @param _stateRoot The state root of the claim.\\n    event Claimed(address indexed _claimer, uint256 indexed _epoch, bytes32 _stateRoot);\\n\\n    /// @dev This event indicates that `sendSnapshot(epoch)` should be called in the inbox.\\n    /// @param _epoch The epoch associated with the challenged claim.\\n    /// @param _challenger The address of the challenger.\\n    event Challenged(uint256 indexed _epoch, address indexed _challenger);\\n\\n    /// @dev This event indicates that a message has been relayed.\\n    /// @param _msgId The msgId of the message that was relayed.\\n    event MessageRelayed(uint64 _msgId);\\n\\n    /// @dev This events indicates that verification has succeeded. The messages are ready to be relayed.\\n    /// @param _epoch The epoch that was verified.\\n    event Verified(uint256 indexed _epoch);\\n\\n    /// @dev This event indicates the sequencer delay limit updated.\\n    /// @param _newSequencerDelayLimit The new max sequencer past timestamping power.\\n    event sequencerDelayLimitUpdateReceived(uint256 _newSequencerDelayLimit);\\n\\n    /// @dev This event indicates the sequencer futue limit updated.\\n    /// @param _newSequencerFutureLimit The new max sequencer future timestamping power.\\n    event sequencerFutureLimitUpdateReceived(uint256 _newSequencerFutureLimit);\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier OnlyBridgeRunning() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod - latestVerifiedEpoch <= timeoutEpochs, \\\"Bridge Shutdown.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier OnlyBridgeShutdown() {\\n        unchecked {\\n            require(block.timestamp / epochPeriod - latestVerifiedEpoch > timeoutEpochs, \\\"Bridge Running.\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev Constructor.\\n    /// Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value\\n    /// @param _deposit The deposit amount to submit a claim in wei.\\n    /// @param _epochPeriod The duration of each epoch.\\n    /// @param _challengePeriod The duration of the period allowing to challenge a claim.\\n    /// @param _timeoutEpochs The epochs before the bridge is considered shutdown.\\n    /// @param _routerGnosisToArb The address of the router on Ethereum that routes from Arbitrum to Ethereum.\\n    /// @param _sequencerDelayLimit The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.\\n    /// @param _sequencerFutureLimit The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.\\n    constructor(\\n        uint256 _deposit,\\n        uint256 _epochPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _timeoutEpochs,\\n        address _routerGnosisToArb,\\n        uint256 _sequencerDelayLimit,\\n        uint256 _sequencerFutureLimit\\n    ) {\\n        deposit = _deposit;\\n        epochPeriod = _epochPeriod;\\n        challengePeriod = _challengePeriod;\\n        timeoutEpochs = _timeoutEpochs;\\n        routerGnosisToArb = _routerGnosisToArb;\\n        sequencerDelayLimit = _sequencerDelayLimit;\\n        sequencerFutureLimit = _sequencerFutureLimit;\\n\\n        // claimant and challenger are not sybil resistant\\n        // must burn half deposit to prevent zero cost griefing\\n        burn = _deposit / 2;\\n        depositPlusReward = 2 * _deposit - burn;\\n\\n        latestVerifiedEpoch = block.timestamp / epochPeriod - 1;\\n    }\\n\\n    // ************************************* //\\n    // *        Parameter Updates          * //\\n    // ************************************* //\\n\\n    /// @dev Set the sequencerFutureLimit by reading from the Arbitrum Bridge\\n    /// @param _newSequencerFutureLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerFutureLimit(uint256 _newSequencerFutureLimit, uint256 _timestamp) external {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        require(timestampFutureUpdated < _timestamp, \\\"Message is outdated.\\\");\\n\\n        if (sequencerFutureLimit != _newSequencerFutureLimit) {\\n            sequencerFutureLimit = _newSequencerFutureLimit;\\n            timestampFutureUpdated = _timestamp;\\n            emit sequencerFutureLimitUpdateReceived(_newSequencerFutureLimit);\\n        }\\n    }\\n\\n    /// @dev Set the sequencerDelayLimit by reading from the Arbitrum Bridge\\n    /// @param _newSequencerDelayLimit The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.\\n    /// @param _timestamp The timestamp of the message.\\n    function updateSequencerDelayLimit(uint256 _newSequencerDelayLimit, uint256 _timestamp) external {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        require(timestampDelayUpdated < _timestamp, \\\"Message is outdated.\\\");\\n\\n        if (sequencerDelayLimit != _newSequencerDelayLimit) {\\n            sequencerDelayLimit = _newSequencerDelayLimit;\\n            timestampDelayUpdated = _timestamp;\\n            emit sequencerDelayLimitUpdateReceived(_newSequencerDelayLimit);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Submit a claim about the _stateRoot at _epoch and submit a deposit.\\n    /// @param _epoch The epoch for which the claim is made.\\n    /// @param _stateRoot The state root to claim.\\n    function claim(uint256 _epoch, bytes32 _stateRoot) external payable virtual {\\n        require(msg.value >= deposit, \\\"Insufficient claim deposit.\\\");\\n        unchecked {\\n            require(_epoch == block.timestamp / epochPeriod - 1, \\\"Epoch is invalid.\\\");\\n        }\\n        require(_stateRoot != bytes32(0), \\\"Invalid claim.\\\");\\n        require(claims[_epoch].claimer == address(0), \\\"Claim already made.\\\");\\n\\n        claims[_epoch] = Claim({\\n            stateRoot: _stateRoot,\\n            claimer: msg.sender,\\n            timestamp: uint32(block.timestamp),\\n            honest: Party.None\\n        });\\n\\n        emit Claimed(msg.sender, _epoch, _stateRoot);\\n\\n        // Refund overpayment.\\n        if (msg.value > deposit) {\\n            uint256 refund = msg.value - deposit;\\n            payable(msg.sender).send(refund); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.\\n    /// @param _epoch The epoch of the claim to challenge.\\n    /// @param _disputedStateRoot The claimed state root to challenge, included to ensure txn reverts if claim is removed due to a block reorg.\\n    function challenge(uint256 _epoch, bytes32 _disputedStateRoot) external payable virtual {\\n        require(challengers[_epoch] == address(0), \\\"Claim already challenged.\\\");\\n        require(claims[_epoch].stateRoot == _disputedStateRoot, \\\"No claim for epoch.\\\");\\n        require(msg.value >= deposit, \\\"Insufficient challenge deposit.\\\");\\n\\n        challengers[_epoch] = msg.sender;\\n\\n        emit Challenged(_epoch, msg.sender);\\n\\n        // Refund overpayment.\\n        if (msg.value > deposit) {\\n            uint256 refund = msg.value - deposit;\\n            payable(msg.sender).send(refund); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Resolves the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch of the optimistic claim.\\n    function verifySnapshot(uint256 _epoch) external virtual OnlyBridgeRunning {\\n        uint256 claimTimestamp = uint256(claims[_epoch].timestamp);\\n        require(claimTimestamp > 0, \\\"Invalid claim.\\\");\\n        require(challengers[_epoch] == address(0), \\\"Claim is challenged.\\\");\\n\\n        require(\\n            block.timestamp - claimTimestamp >= 2 * sequencerDelayLimit + sequencerFutureLimit + challengePeriod,\\n            \\\"Claim must wait for sequencerDelay and challengePeriod.\\\"\\n        );\\n\\n        if (_epoch > latestVerifiedEpoch) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = claims[_epoch].stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        claims[_epoch].honest = Party.Claimer;\\n    }\\n\\n    /// Note: Access restricted to AMB.\\n    /// @dev Resolves any challenge of the optimistic claim for '_epoch'.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external virtual OnlyBridgeRunning {\\n        // Ethereum -> Arbitrum retryable ticket message authentication with the canonical Ethereum -> Arbitrum bridge.\\n        // example https://github.com/OffchainLabs/arbitrum-tutorials/blob/672b0b1e514f199133761daac000db954f0b5447/packages/greeter/contracts/arbitrum/GreeterL2.sol\\n        // docs https://developer.arbitrum.io/arbos/l1-to-l2-messaging#address-aliasing\\n\\n        require(msg.sender == AddressAliasHelper.applyL1ToL2Alias(routerGnosisToArb), \\\"Only L1 routerGnosisToArb.\\\");\\n\\n        if (_epoch > latestVerifiedEpoch && _stateRoot != bytes32(0)) {\\n            latestVerifiedEpoch = _epoch;\\n            stateRoot = _stateRoot;\\n            emit Verified(_epoch);\\n        }\\n\\n        bytes32 claimedStateRoot = claims[_epoch].stateRoot;\\n\\n        if (claimedStateRoot != bytes32(0)) {\\n            if (claimedStateRoot == _stateRoot) {\\n                claims[_epoch].honest = Party.Claimer;\\n            } else if (challengers[_epoch] != address(0)) {\\n                claims[_epoch].honest = Party.Challenger;\\n            }\\n        }\\n    }\\n\\n    /// @dev Verifies and relays the message. UNTRUSTED.\\n    /// @param _proof The merkle proof to prove the message inclusion in the inbox state root.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address of the contract on Arbitrum to call.\\n    /// @param _message The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)\\n    function sendMessage(bytes32[] memory _proof, uint64 _msgId, address _to, bytes memory _message) external {\\n        require(_proof.length < 64, \\\"Proof too long.\\\");\\n\\n        bytes32 nodeHash = keccak256(abi.encodePacked(_msgId, _to, _message));\\n\\n        // double hashed leaf\\n        // avoids second order preimage attacks\\n        // https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/\\n        assembly {\\n            mstore(0x00, nodeHash)\\n            nodeHash := keccak256(0x00, 0x20)\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < _proof.length; i++) {\\n                bytes32 proofElement = _proof[i];\\n                // sort sibling hashes as a convention for efficient proof validation\\n                if (proofElement > nodeHash)\\n                    assembly {\\n                        mstore(0x00, nodeHash)\\n                        mstore(0x20, proofElement)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n                else\\n                    assembly {\\n                        mstore(0x00, proofElement)\\n                        mstore(0x20, nodeHash)\\n                        nodeHash := keccak256(0x00, 0x40)\\n                    }\\n            }\\n        }\\n\\n        require(stateRoot == nodeHash, \\\"Invalid proof.\\\");\\n\\n        // msgId is the zero-based index of the message in the inbox.\\n        // msgId is also used as an index in the relayed bitmap to prevent replay.\\n        // Note: a bitmap is used instead of a simple boolean mapping to save 15k gas per message.\\n\\n        uint256 relayIndex = _msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = _msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        require(((replay >> offset) & bytes32(uint256(1))) == bytes32(0), \\\"Message already relayed\\\");\\n        relayed[relayIndex] = replay | bytes32(1 << offset);\\n\\n        // UNTRUSTED.\\n        (bool success, ) = _to.call(_message);\\n        require(success, \\\"Failed to call contract\\\");\\n\\n        emit MessageRelayed(_msgId);\\n    }\\n\\n    /// @dev Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawClaimDeposit(uint256 _epoch) external virtual {\\n        require(claims[_epoch].honest == Party.Claimer, \\\"Claim unsuccessful.\\\");\\n\\n        address claimer = claims[_epoch].claimer;\\n\\n        delete claims[_epoch];\\n\\n        if (challengers[_epoch] != address(0)) {\\n            payable(BURN_ADDRESS).send(burn);\\n            payable(claimer).send(depositPlusReward); // User is responsible for accepting ETH.\\n        } else {\\n            payable(claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.\\n    /// @param _epoch The epoch associated with the challenge deposit to withraw.\\n    function withdrawChallengeDeposit(uint256 _epoch) external {\\n        require(claims[_epoch].honest == Party.Challenger, \\\"Challenge unsuccessful.\\\");\\n\\n        address challenger = challengers[_epoch];\\n\\n        delete claims[_epoch];\\n        delete challengers[_epoch];\\n\\n        payable(BURN_ADDRESS).send(burn); // half burnt\\n        payable(challenger).send(depositPlusReward); // User is responsible for accepting ETH.\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawClaimerEscapeHatch(uint256 _epoch) external OnlyBridgeShutdown {\\n        require(claims[_epoch].honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        address claimer = claims[_epoch].claimer;\\n\\n        delete claims[_epoch];\\n\\n        if (claimer != address(0)) {\\n            payable(claimer).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    /// @dev When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.\\n    /// @param _epoch The epoch associated with the claim deposit to withraw.\\n    function withdrawChallengerEscapeHatch(uint256 _epoch) external OnlyBridgeShutdown {\\n        require(claims[_epoch].honest == Party.None, \\\"Claim resolved.\\\");\\n\\n        address challenger = challengers[_epoch];\\n\\n        delete challengers[_epoch];\\n\\n        if (challenger != address(0)) {\\n            payable(challenger).send(deposit); // User is responsible for accepting ETH.\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Pure / Views            * //\\n    // ************************************* //\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochNow() external view returns (uint256 epoch) {\\n        epoch = block.timestamp / epochPeriod;\\n    }\\n\\n    /// @dev Get the current epoch from the outbox's point of view using the Ethereum L1 clock.\\n    /// @return epoch The hash of the claim.\\n    function epochAt(uint256 timestamp) external view returns (uint256 epoch) {\\n        epoch = timestamp / epochPeriod;\\n    }\\n\\n    /// @dev Get the msg relayed status.\\n    /// @param _msgId The msgId to check.\\n    /// @return isRelayed True if the msg was relayed.\\n    function isMsgRelayed(uint256 _msgId) external view returns (bool isRelayed) {\\n        uint256 relayIndex = _msgId >> 8;\\n        uint256 offset;\\n\\n        unchecked {\\n            offset = _msgId % 256;\\n        }\\n\\n        bytes32 replay = relayed[relayIndex];\\n\\n        isRelayed = (replay >> offset) & bytes32(uint256(1)) == bytes32(uint256(1));\\n    }\\n}\\n\",\"keccak256\":\"0x5ade88ecc27d6f259a80429cca2e3d457235638a5297d266c55875f5d848f27b\",\"license\":\"MIT\"},\"src/interfaces/outboxes/IVeaOutboxOnL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\n/// @dev Interface of the Vea Outbox on Optimistic Rollup L2s like Arbitrum, Optimism, Base, Specular where L2 storage is inexpensive compared to L1 calldata.\\ninterface IVeaOutboxOnL2 {\\n    /// @dev Verifies and relays the message.\\n    /// Note: Gateways expect first argument of message call to be the inbox sender, used for authentication.\\n    /// @param _proof The merkle proof to prove the message.\\n    /// @param _msgId The zero based index of the message in the inbox.\\n    /// @param _to The address to send the message to.\\n    /// @param _message The message to relay.\\n    function sendMessage(bytes32[] calldata _proof, uint64 _msgId, address _to, bytes calldata _message) external;\\n\\n    /// @dev Resolves any challenge of the optimistic claim for 'epoch' using the canonical bridge.\\n    /// Note: Access restricted to canonical bridge.\\n    /// @param _epoch The epoch to verify.\\n    /// @param _stateRoot The true state root for the epoch.\\n    function resolveDisputedClaim(uint256 _epoch, bytes32 _stateRoot) external;\\n}\\n\",\"keccak256\":\"0x22ece6282ad246dcc086d100644a479be0cee8307d4b5c1440110241002ca013\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063710cc9a7116100f7578063b5b7a18411610095578063eb8dedfa11610064578063eb8dedfa146105cd578063f3f480d914610601578063f4cf751b14610635578063fccc28131461065557600080fd5b8063b5b7a18414610539578063d0e30db01461056d578063d6e01b39146105a1578063e813a755146105b757600080fd5b80638caeb7a8116100d15780638caeb7a8146104685780639588eca214610488578063a888c2cd1461049e578063b044397e1461050557600080fd5b8063710cc9a7146103fe5780637ffc2a6e1461041e578063836e344b1461043457600080fd5b806331ddf7431161016f5780634a439cfe1161013e5780634a439cfe1461035057806350b81dbe1461037057806364962849146103905780636b45ebcb146103b057600080fd5b806331ddf7431461028e57806343b066d5146102ae57806344df8e70146102fc5780634518f79f1461033057600080fd5b8063222ae786116101ab578063222ae7861461023057806327ee6bdd146102455780632c1925191461025b57806331d144571461027b57600080fd5b806302b2f7c7146101d25780630e56752e146101e7578063114095d314610210575b600080fd5b6101e56101e03660046119c4565b61066a565b005b3480156101f357600080fd5b506101fd60015481565b6040519081526020015b60405180910390f35b34801561021c57600080fd5b506101e561022b3660046119e6565b61085c565b34801561023c57600080fd5b506101fd6109d2565b34801561025157600080fd5b506101fd60055481565b34801561026757600080fd5b506101e56102763660046119c4565b610a03565b6101e56102893660046119c4565b610ae9565b34801561029a57600080fd5b506101e56102a9366004611aea565b610d91565b3480156102ba57600080fd5b506102ec6102c93660046119e6565b600881811c60009081526020919091526040902054600160ff9092161c81161490565b6040519015158152602001610207565b34801561030857600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561033c57600080fd5b506101e561034b3660046119e6565b611030565b34801561035c57600080fd5b506101fd61036b3660046119e6565b6111ad565b34801561037c57600080fd5b506101e561038b3660046119e6565b6111df565b34801561039c57600080fd5b506101e56103ab3660046119e6565b611360565b3480156103bc57600080fd5b506103e66103cb3660046119e6565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610207565b34801561040a57600080fd5b506101e56104193660046119c4565b6115e2565b34801561042a57600080fd5b506101fd60025481565b34801561044057600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561047457600080fd5b506101e56104833660046119c4565b6116c0565b34801561049457600080fd5b506101fd60045481565b3480156104aa57600080fd5b506104f56104b93660046119e6565b600660205260009081526040902080546001909101546001600160a01b03811690600160a01b810463ffffffff1690600160c01b900460ff1684565b6040516102079493929190611bec565b34801561051157600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054557600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057957600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ad57600080fd5b506101fd60035481565b3480156105c357600080fd5b506101fd60005481565b3480156105d957600080fd5b506103e67f000000000000000000000000000000000000000000000000000000000000000081565b34801561060d57600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561064157600080fd5b506101e56106503660046119e6565b61187b565b34801561066157600080fd5b506103e6600081565b6000828152600760205260409020546001600160a01b0316156106d45760405162461bcd60e51b815260206004820152601960248201527f436c61696d20616c7265616479206368616c6c656e6765642e0000000000000060448201526064015b60405180910390fd5b60008281526006602052604090205481146107275760405162461bcd60e51b815260206004820152601360248201527227379031b630b4b6903337b91032b837b1b41760691b60448201526064016106cb565b7f00000000000000000000000000000000000000000000000000000000000000003410156107975760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e74206368616c6c656e6765206465706f7369742e0060448201526064016106cb565b60008281526007602052604080822080546001600160a01b031916339081179091559051909184917fcfe09ca25f55d949baba5e280f5750c9ba4b9048fca5532f916067d433afe4d79190a37f00000000000000000000000000000000000000000000000000000000000000003411156108585760006108377f000000000000000000000000000000000000000000000000000000000000000034611c51565b604051909150339082156108fc029083906000818181858888f15050505050505b5050565b7f00000000000000000000000000000000000000000000000000000000000000006005547f000000000000000000000000000000000000000000000000000000000000000042816108af576108af611c64565b0403116108f05760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106cb565b60008082815260066020526040902060010154600160c01b900460ff16600281111561091e5761091e611bd6565b1461095d5760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106cb565b600081815260076020526040902080546001600160a01b031981169091556001600160a01b03168015610858576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b60006109fe7f000000000000000000000000000000000000000000000000000000000000000042611c7a565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b01011614610a565760405162461bcd60e51b81526004016106cb90611c9c565b8060025410610a9e5760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b60448201526064016106cb565b816000541461085857600082905560028190556040518281527f684f6fb71cbcb798156dcca2a95dbd142fa1f8957637833b1897ab89e05aa707906020015b60405180910390a15050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610b595760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420636c61696d206465706f7369742e000000000060448201526064016106cb565b60017f00000000000000000000000000000000000000000000000000000000000000004281610b8a57610b8a611c64565b04038214610bce5760405162461bcd60e51b815260206004820152601160248201527022b837b1b41034b99034b73b30b634b21760791b60448201526064016106cb565b80610c0c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b60448201526064016106cb565b6000828152600660205260409020600101546001600160a01b031615610c6a5760405162461bcd60e51b815260206004820152601360248201527221b630b4b69030b63932b0b23c9036b0b2329760691b60448201526064016106cb565b6040805160808101825282815233602080830191825263ffffffff4281168486019081526000606086018181528982526006909452959095208451815592516001840180549651909216600160a01b026001600160c01b03199096166001600160a01b039091161794909417808555905192939192919060ff60c01b1916600160c01b836002811115610cff57610cff611bd6565b02179055505060405182815283915033907fd95107f4584744c6c893a04c43058aadd1ce8aac8ca5d64140eaf277de6c1d579060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000003411156108585760006108377f000000000000000000000000000000000000000000000000000000000000000034611c51565b6040845110610dd45760405162461bcd60e51b815260206004820152600f60248201526e283937b7b3103a37b7903637b7339760891b60448201526064016106cb565b6000838383604051602001610deb93929190611d03565b604051602081830303815290604052805190602001209050806000526020600020905060005b8551811015610e6d576000868281518110610e2e57610e2e611d45565b6020026020010151905082811115610e5457826000528060205260406000209250610e64565b8060005282602052604060002092505b50600101610e11565b508060045414610eb05760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210383937b7b31760911b60448201526064016106cb565b600884811c66ffffffffffffff16600081815260209290925260409091205460ff86169080821c60011615610f275760405162461bcd60e51b815260206004820152601760248201527f4d65737361676520616c72656164792072656c6179656400000000000000000060448201526064016106cb565b6000838152600860205260408082206001851b84179055516001600160a01b03881690610f55908890611d5b565b6000604051808303816000865af19150503d8060008114610f92576040519150601f19603f3d011682016040523d82523d6000602084013e610f97565b606091505b5050905080610fe85760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f2063616c6c20636f6e747261637400000000000000000060448201526064016106cb565b60405167ffffffffffffffff891681527f54303fab361bc52c2f1f56ace7351189582264f74ce47a6e7c3f478d64c429439060200160405180910390a1505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006005547f0000000000000000000000000000000000000000000000000000000000000000428161108357611083611c64565b0403116110c45760405162461bcd60e51b815260206004820152600f60248201526e213934b233b290293ab73734b7339760891b60448201526064016106cb565b60008082815260066020526040902060010154600160c01b900460ff1660028111156110f2576110f2611bd6565b146111315760405162461bcd60e51b815260206004820152600f60248201526e21b630b4b6903932b9b7b63b32b21760891b60448201526064016106cb565b6000818152600660205260408120600181018054929091556001600160c81b0319821690556001600160a01b03168015610858576040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b60006111d97f000000000000000000000000000000000000000000000000000000000000000083611c7a565b92915050565b6001600082815260066020526040902060010154600160c01b900460ff16600281111561120e5761120e611bd6565b146112515760405162461bcd60e51b815260206004820152601360248201527221b630b4b6903ab739bab1b1b2b9b9b33ab61760691b60448201526064016106cb565b6000818152600660209081526040808320600181018054918590556001600160c81b0319821690556007909252909120546001600160a01b03918216911615611318576040516000907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b6040516001600160a01b038216907f000000000000000000000000000000000000000000000000000000000000000080156108fc02916000818181858888f150505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006005547f000000000000000000000000000000000000000000000000000000000000000042816113b3576113b3611c64565b040311156113f65760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106cb565b600081815260066020526040902060010154600160a01b900463ffffffff16806114535760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b630b4b69760911b60448201526064016106cb565b6000828152600760205260409020546001600160a01b0316156114af5760405162461bcd60e51b815260206004820152601460248201527321b630b4b69034b99031b430b63632b733b2b21760611b60448201526064016106cb565b7f000000000000000000000000000000000000000000000000000000000000000060015460005460026114e29190611d6e565b6114ec9190611d85565b6114f69190611d85565b6115008242611c51565b10156115745760405162461bcd60e51b815260206004820152603760248201527f436c61696d206d757374207761697420666f722073657175656e63657244656c60448201527f617920616e64206368616c6c656e6765506572696f642e00000000000000000060648201526084016106cb565b6005548211156115bd576005829055600082815260066020526040808220546004555183917ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f791a25b506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b010116146116355760405162461bcd60e51b81526004016106cb90611c9c565b806003541061167d5760405162461bcd60e51b815260206004820152601460248201527326b2b9b9b0b3b29034b99037baba3230ba32b21760611b60448201526064016106cb565b816001541461085857600182905560038190556040518281527f5328ca176e0092ea14be7c843a94b093c0fe88c93d9c01ab0f0281d9e62e405590602001610add565b7f00000000000000000000000000000000000000000000000000000000000000006005547f0000000000000000000000000000000000000000000000000000000000000000428161171357611713611c64565b040311156117565760405162461bcd60e51b815260206004820152601060248201526f213934b233b29029b43aba3237bbb71760811b60448201526064016106cb565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000061111161111160901b010116146117a95760405162461bcd60e51b81526004016106cb90611c9c565b600554821180156117b957508015155b156117f4576005829055600481905560405182907ff786e7f77ede00a02a5464f8f0555798f42ba99a4a920ef2778db8d75e4656f790600090a25b6000828152600660205260409020548015611876578181036118365750506000908152600660205260409020600101805460ff60c01b1916600160c01b179055565b6000838152600760205260409020546001600160a01b031615611876576000838152600660205260409020600101805460ff60c01b1916600160c11b1790555b505050565b6002600082815260066020526040902060010154600160c01b900460ff1660028111156118aa576118aa611bd6565b146118f75760405162461bcd60e51b815260206004820152601760248201527f4368616c6c656e676520756e7375636365737366756c2e00000000000000000060448201526064016106cb565b600081815260076020818152604080842080546006845282862086815560010180546001600160c81b03191690559390925281546001600160a01b031916909155516001600160a01b0390911691907f000000000000000000000000000000000000000000000000000000000000000080156108fc029183818181858288f150506040516001600160a01b03851693507f000000000000000000000000000000000000000000000000000000000000000080156108fc02935091506000818181858888f150505050505050565b600080604083850312156119d757600080fd5b50508035926020909101359150565b6000602082840312156119f857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3e57611a3e6119ff565b604052919050565b803567ffffffffffffffff81168114611a5e57600080fd5b919050565b80356001600160a01b0381168114611a5e57600080fd5b600082601f830112611a8b57600080fd5b813567ffffffffffffffff811115611aa557611aa56119ff565b611ab8601f8201601f1916602001611a15565b818152846020838601011115611acd57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611b0057600080fd5b843567ffffffffffffffff80821115611b1857600080fd5b818701915087601f830112611b2c57600080fd5b8135602082821115611b4057611b406119ff565b8160051b611b4f828201611a15565b928352848101820192828101908c851115611b6957600080fd5b958301955b84871015611b8757863582529583019590830190611b6e565b9950611b97915050898201611a46565b96505050611ba760408801611a63565b93506060870135915080821115611bbd57600080fd5b50611bca87828801611a7a565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b8481526001600160a01b038416602082015263ffffffff831660408201526080810160038310611c2c57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156111d9576111d9611c3b565b634e487b7160e01b600052601260045260246000fd5b600082611c9757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601a908201527f4f6e6c79204c3120726f75746572476e6f736973546f4172622e000000000000604082015260600190565b6000815160005b81811015611cf45760208185018101518683015201611cda565b50600093019283525090919050565b60c084901b6001600160c01b0319168152606083901b6bffffffffffffffffffffffff191660088201526000611d3c601c830184611cd3565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000611d678284611cd3565b9392505050565b80820281158282048414176111d9576111d9611c3b565b808201808211156111d9576111d9611c3b56fea26469706673582212206a9e2f2a8c0c0fb56828fdb44d278c3cab1104c2ab82d7990e1080cf25370ced64736f6c63430008120033",
  "devdoc": {
    "details": "Vea Outbox From Gnosis to Arbitrum. Note: This contract is deployed on Arbitrum.",
    "events": {
      "Challenged(uint256,address)": {
        "details": "This event indicates that `sendSnapshot(epoch)` should be called in the inbox.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_epoch": "The epoch associated with the challenged claim."
        }
      },
      "Claimed(address,uint256,bytes32)": {
        "details": "Watchers check this event to challenge fraud.",
        "params": {
          "_claimer": "The address of the claimer.",
          "_epoch": "The epoch associated with the claim.",
          "_stateRoot": "The state root of the claim."
        }
      },
      "MessageRelayed(uint64)": {
        "details": "This event indicates that a message has been relayed.",
        "params": {
          "_msgId": "The msgId of the message that was relayed."
        }
      },
      "Verified(uint256)": {
        "details": "This events indicates that verification has succeeded. The messages are ready to be relayed.",
        "params": {
          "_epoch": "The epoch that was verified."
        }
      },
      "sequencerDelayLimitUpdateReceived(uint256)": {
        "details": "This event indicates the sequencer delay limit updated.",
        "params": {
          "_newSequencerDelayLimit": "The new max sequencer past timestamping power."
        }
      },
      "sequencerFutureLimitUpdateReceived(uint256)": {
        "details": "This event indicates the sequencer futue limit updated.",
        "params": {
          "_newSequencerFutureLimit": "The new max sequencer future timestamping power."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "challenge(uint256,bytes32)": {
        "details": "Submit a challenge for the claim of the inbox state root snapshot taken at 'epoch'.",
        "params": {
          "_disputedStateRoot": "The claimed state root to challenge, included to ensure txn reverts if claim is removed due to a block reorg.",
          "_epoch": "The epoch of the claim to challenge."
        }
      },
      "claim(uint256,bytes32)": {
        "details": "Submit a claim about the _stateRoot at _epoch and submit a deposit.",
        "params": {
          "_epoch": "The epoch for which the claim is made.",
          "_stateRoot": "The state root to claim."
        }
      },
      "constructor": {
        "details": "Constructor. Note: epochPeriod must match the VeaInboxGnosisToArb contract deployment on Arbitrum, since it's on a different chain, we can't read it and trust the deployer to set a correct value",
        "params": {
          "_challengePeriod": "The duration of the period allowing to challenge a claim.",
          "_deposit": "The deposit amount to submit a claim in wei.",
          "_epochPeriod": "The duration of each epoch.",
          "_routerGnosisToArb": "The address of the router on Ethereum that routes from Arbitrum to Ethereum.",
          "_sequencerDelayLimit": "The maximum delay in seconds that the Arbitrum sequencer can backdate transactions.",
          "_sequencerFutureLimit": "The maximum delay in seconds that the Arbitrum sequencer can futuredate transactions.",
          "_timeoutEpochs": "The epochs before the bridge is considered shutdown."
        }
      },
      "epochAt(uint256)": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "epochNow()": {
        "details": "Get the current epoch from the outbox's point of view using the Ethereum L1 clock.",
        "returns": {
          "epoch": "The hash of the claim."
        }
      },
      "isMsgRelayed(uint256)": {
        "details": "Get the msg relayed status.",
        "params": {
          "_msgId": "The msgId to check."
        },
        "returns": {
          "isRelayed": "True if the msg was relayed."
        }
      },
      "resolveDisputedClaim(uint256,bytes32)": {
        "details": "Resolves any challenge of the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch to verify.",
          "_stateRoot": "The true state root for the epoch."
        }
      },
      "sendMessage(bytes32[],uint64,address,bytes)": {
        "details": "Verifies and relays the message. UNTRUSTED.",
        "params": {
          "_message": "The message encoded in the vea inbox as abi.encodeWithSelector(fnSelector, msg.sender, param1, param2, ...)",
          "_msgId": "The zero based index of the message in the inbox.",
          "_proof": "The merkle proof to prove the message inclusion in the inbox state root.",
          "_to": "The address of the contract on Arbitrum to call."
        }
      },
      "updateSequencerDelayLimit(uint256,uint256)": {
        "details": "Set the sequencerDelayLimit by reading from the Arbitrum Bridge",
        "params": {
          "_newSequencerDelayLimit": "The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.",
          "_timestamp": "The timestamp of the message."
        }
      },
      "updateSequencerFutureLimit(uint256,uint256)": {
        "details": "Set the sequencerFutureLimit by reading from the Arbitrum Bridge",
        "params": {
          "_newSequencerFutureLimit": "The delaySeconds from the MaxTimeVariation struct in the Arbitrum Sequencer contract.",
          "_timestamp": "The timestamp of the message."
        }
      },
      "verifySnapshot(uint256)": {
        "details": "Resolves the optimistic claim for '_epoch'.",
        "params": {
          "_epoch": "The epoch of the optimistic claim."
        }
      },
      "withdrawChallengeDeposit(uint256)": {
        "details": "Sends the deposit back to the Challenger if successful. Includes a portion of the Bridger's deposit.",
        "params": {
          "_epoch": "The epoch associated with the challenge deposit to withraw."
        }
      },
      "withdrawChallengerEscapeHatch(uint256)": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the challenger to withdraw their deposit.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimDeposit(uint256)": {
        "details": "Sends the deposit back to the Claimer if successful. Includes a portion of the Challenger's deposit if unsuccessfully challenged.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      },
      "withdrawClaimerEscapeHatch(uint256)": {
        "details": "When bridge is shutdown, no claim disputes can be resolved. This allows the claimer to withdraw their deposit.",
        "params": {
          "_epoch": "The epoch associated with the claim deposit to withraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolveDisputedClaim(uint256,bytes32)": {
        "notice": "Note: Access restricted to AMB."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4294,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "sequencerDelayLimit",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4296,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "sequencerFutureLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4298,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "timestampDelayUpdated",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4300,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "timestampFutureUpdated",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4302,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "stateRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 4304,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "latestVerifiedEpoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4309,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "claims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Claim)4331_storage)"
      },
      {
        "astId": 4313,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "challengers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4317,
        "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
        "label": "relayed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Party)4321": {
        "encoding": "inplace",
        "label": "enum VeaOutboxGnosisToArb.Party",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Claim)4331_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VeaOutboxGnosisToArb.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)4331_storage"
      },
      "t_struct(Claim)4331_storage": {
        "encoding": "inplace",
        "label": "struct VeaOutboxGnosisToArb.Claim",
        "members": [
          {
            "astId": 4323,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "stateRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4325,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "claimer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4327,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "timestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 4330,
            "contract": "src/gnosisToArbitrum/VeaOutboxGnosisToArb.sol:VeaOutboxGnosisToArb",
            "label": "honest",
            "offset": 24,
            "slot": "1",
            "type": "t_enum(Party)4321"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
